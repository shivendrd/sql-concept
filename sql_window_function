create table employee
( emp_ID int
, emp_NAME varchar(50)
, DEPT_NAME varchar(50)
, SALARY int);

insert into employee values(101, 'Mohan', 'Admin', 4000);
insert into employee values(102, 'Rajkumar', 'HR', 3000);
insert into employee values(103, 'Akbar', 'IT', 4000);
insert into employee values(104, 'Dorvin', 'Finance', 6500);
insert into employee values(105, 'Rohit', 'HR', 3000);
insert into employee values(106, 'Rajesh',  'Finance', 5000);
insert into employee values(107, 'Preet', 'HR', 7000);
insert into employee values(108, 'Maryam', 'Admin', 4000);
insert into employee values(109, 'Sanjay', 'IT', 6500);
insert into employee values(110, 'Vasudha', 'IT', 7000);
insert into employee values(111, 'Melinda', 'IT', 8000);
insert into employee values(112, 'Komal', 'IT', 10000);
insert into employee values(113, 'Gautham', 'Admin', 2000);
insert into employee values(114, 'Manisha', 'HR', 3000);
insert into employee values(115, 'Chandni', 'IT', 4500);
insert into employee values(116, 'Satya', 'Finance', 6500);
insert into employee values(117, 'Adarsh', 'HR', 3500);
insert into employee values(118, 'Tejaswi', 'Finance', 5500);
insert into employee values(119, 'Cory', 'HR', 8000);
insert into employee values(120, 'Monica', 'Admin', 5000);
insert into employee values(121, 'Rosalin', 'IT', 6000);
insert into employee values(122, 'Ibrahim', 'IT', 8000);
insert into employee values(123, 'Vikram', 'IT', 8000);
insert into employee values(124, 'Dheeraj', 'IT', 11000);

select * from employee;

// max salary from the employee table

select max(salary) as max_salary from employee;

// min salary from the employee table

select min(salary) as min_salary from employee;


// max salary based on department 

select dept_name,max(salary) as max_salary 
from employee
group by dept_name;

// max salary based on department alongwith if you want to show other details best way is using window function or analytic function


// by writing window_function we need to use over() clause 

select e.*,
max(salary) over() as max_salary
from employee e;

explanation -- by using over() clause you can use as window function 

explanation of query - here max() will not use as a aggregate function over() clause is going to specify sql that you need to creat a window function 
by using this query  sql will create one window for all the records in this result set. and that one window its going to apply this query max(salary)

/// what will be the query for extract max salary corresponding to each department -- 
--- we can use a clause of partition by then mention column name 

select e.*,
max(salary) over(partition by dept_name) as max_salary
from employee e;

explanation of query - This query will do every distinct value present in dept_name column its going to create one window function and its going to apply max(salary) function to each of those window
by using this you can get max salary different from each of the department 

Note*--  same we can use other aggregate function like avg(), min(), max() etc. 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ROW_NUMBER()--- Its going to assign value to each of the records in the table . The clause we will use here row_number()

select e.*,
row_number() over() as rn
from employee e;

explanation of query -- For every record its going to create a unique identifier inside over() clause we have not passed yet any column that's why sql will treat as a one window and for that whole window its going to assign a unique 
identifier row number()

Query --  What if we want to assign no based on different department - 

select e.*,
row_number() over(partition by dept_name) as rnm
from employee e;

explanation of query -- every unique department the row_number() strat from 1 to no of record present in that department . 
example -  HR Departemnt has 4 people (then it will start from 1 to 4)
           IT Department has 7 people (then it will start from 1 to 7)
           Admin Department has 6 people(then it will start from 1 to 6)
By this Query you can see one unique thing data will not being sorted so
Query -- what will we do to sort the data 
Answer is simple we will use order by clause in emp_id

select e.*,
row_number() over(partition by dept_name order by emp_id) as rnm
from employee e;

------
* Now the Important Question is What is the use of row_number() where can we use such use case -- 
Query -- Let's say to fetch the first 2 employee from each department who joined from the beginning -- so there id will be less 



select * from(
	select e.*,
	row_number() over(partition by dept_name order by emp_id) as rnm
	from employee e) as x
where x.rnm<3;

explanation of query -- we will write a subquery then we will use the inner query to fetch the record and outer query we will will use to fetch only two records 

Query -- what we want reverse latest 2 employee from each department who joined earlier -- so the id will be more for this 

select * from(
	select e.*,
	row_number() over(partition by dept_name order by emp_id DESC) as rnm
	from employee e) as x
where x.rnm<=2;


explanation of query -- Again we will write a subquery the only two changes here will be inside over() clause where we will get the emp_id in decending order and one change will be in where() clause 

